// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

model User {
  id String @id @default(cuid())
  email String @unique
  username String @unique
  name String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  notes Note[]

  image UserImage?

  password Password?
}

model Note {
  id String @id @default(cuid())
  title String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  @@index([ownerId])

  // speeds up sorting by updatedAt DESC
  @@index([ownerId, updatedAt])
}

model UserImage {
  id String @id @default(cuid())
  altText String
  contentType String
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model NoteImage {
  id String @id @default(cuid())
  altText String
  contentType String
  blob Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  @@index([noteId])
}

model Password {
  hash String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}